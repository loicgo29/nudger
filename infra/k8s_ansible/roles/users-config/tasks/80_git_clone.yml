---
# 80 | git clone/update

- name: Ensure git is installed
  become: true
  ansible.builtin.package:
    name: git
    state: present

- name: Ensure ~/.ssh exists for each user
  become: true
  ansible.builtin.file:
    path: "/home/{{ item.name }}/.ssh"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0700"
  loop: "{{ users_k8s }}"

# ----- known_hosts: purge + ajout hashé (évite les conflits hashed/plain) -----

- name: Remove any existing github.com known_hosts (handles hashed)
  become: true
  become_user: "{{ item.name }}"
  ansible.builtin.command: >
    ssh-keygen -R github.com -f /home/{{ item.name }}/.ssh/known_hosts
  register: rm_known_clone
  failed_when: false
  changed_when: "'not found' not in (rm_known_clone.stderr | default(''))"
  loop: "{{ users_k8s }}"

# ----- known_hosts: purge + ajout hashé, sans le module known_hosts -----

- name: Remove any existing github.com known_hosts (handles hashed)
  become: true
  become_user: "{{ item.name }}"
  ansible.builtin.command: >
    ssh-keygen -R github.com -f /home/{{ item.name }}/.ssh/known_hosts
  register: rm_known_gh
  failed_when: false
  changed_when: "'not found' not in (rm_known_gh.stderr | default(''))"
  loop: "{{ users_k8s }}"

- name: Add hashed github.com keys (rsa, ed25519) and dedupe
  become: true
  become_user: "{{ item.name }}"
  ansible.builtin.shell: |
    set -euo pipefail
    KN=/home/{{ item.name }}/.ssh/known_hosts
    tmp="$(mktemp)"
    # -H = host haché ; on ajoute les 2 types
    ssh-keyscan -H -t rsa,ed25519 github.com 2>/dev/null > "$tmp"
    # si KN existe déjà, on concat et on dé-duplique ; sinon on remplace
    if [ -f "$KN" ]; then
      cat "$KN" "$tmp" | awk 'NF' | sort -u > "${KN}.new"
      mv "${KN}.new" "$KN"
    else
      mv "$tmp" "$KN"
    fi
    chmod 0644 "$KN"
  args:
    executable: /bin/bash
  loop: "{{ users_k8s }}"
# ----- SSH deploy key workflow (si git_auth_mode == 'ssh') -----

- name: "[preflight] Verify vaulted key exists in role files"
  delegate_to: localhost
  become: false
  ansible.builtin.stat:
    path: "{{ role_path }}/files/id_deploy_nudger"
  register: vaulted_key_stat
  run_once: true
  when:
    - (git_auth_mode | default('ssh')) == 'ssh'

- name: "[preflight] Fail early if vaulted key missing"
  delegate_to: localhost
  become: false
  ansible.builtin.fail:
    msg: "roles/users-config/files/id_deploy_nudger missing. Place it or disable SSH workflow."
  when:
    - (git_auth_mode | default('ssh')) == 'ssh'
    - not vaulted_key_stat.stat.exists
  run_once: true

- name: Install per-user deploy key for GitHub (from vaulted file)
  become: true
  ansible.builtin.copy:
    src: "id_deploy_nudger"
    dest: "/home/{{ item.name }}/.ssh/id_deploy_nudger"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
    decrypt: true
  loop: "{{ users_k8s }}"
  no_log: true
  when:
    - git_auth_mode == 'ssh'
    - item.git_repos is defined
    - item.git_repos | length > 0

# ----- Prépare répertoires de destination -----

- name: Assert dest path is under user home (SSH mode)
  vars:
    repo_dest: "{{ item.1.dest | default('/home/' ~ item.0.name ~ '/' ~ (item.1.dest_rel | default('repo'))) }}"
  ansible.builtin.assert:
    that:
      - repo_dest is match('^/home/' ~ item.0.name ~ '/')
    fail_msg: "dest={{ repo_dest }} n'est pas sous /home/{{ item.0.name }}/"
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  when: git_auth_mode == 'ssh'
  loop_control:
    label: "{{ item.0.name }} -> {{ item.1.repo }}"

- name: Ensure destination dir for each repo exists
  become: true
  vars:
    repo_dest: "{{ item.1.dest | default('/home/' ~ item.0.name ~ '/' ~ (item.1.dest_rel | default('repo'))) }}"
  ansible.builtin.file:
    path: "{{ repo_dest }}"
    state: directory
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    mode: "0755"
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.name }} -> {{ item.1.repo }} to {{ repo_dest }}"

# ----- Clone/update -----

- name: Clone / update repositories via SSH deploy key
  become: true
  become_user: "{{ item.0.name }}"
  vars:
    repo_dest: "{{ item.1.dest | default('/home/' ~ item.0.name ~ '/' ~ (item.1.dest_rel | default('repo'))) }}"
  ansible.builtin.git:
    repo: "{{ item.1.repo }}"
    dest: "{{ repo_dest }}"
    version: "{{ item.1.version | default('main') }}"
    update: true
    force: true
    depth: "{{ 1 if (item.1.shallow | default(true)) else omit }}"
    recursive: "{{ item.1.submodules | default(true) }}"
    track_submodules: "{{ item.1.submodules | default(true) }}"
    key_file: "/home/{{ item.0.name }}/.ssh/id_deploy_nudger"
    accept_newhostkey: true
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  when: git_auth_mode == 'ssh'

- name: Clone / update repositories via HTTPS (PAT)
  become: true
  become_user: "{{ item.0.name }}"
  ansible.builtin.git:
    repo: "{{ item.1.repo }}"
    dest: "{{ item.1.dest }}"
    version: "{{ item.1.version | default('main') }}"
    update: true
    force: false
    depth: "{{ 1 if (item.1.shallow | default(true)) else omit }}"
    recursive: "{{ item.1.submodules | default(true) }}"
    track_submodules: "{{ item.1.submodules | default(true) }}"
    accept_newhostkey: true
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.name }} <- {{ item.1.repo }}"
  when:
    - git_auth_mode != 'ssh'
# ----- Fetch all branches (avec la bonne clé) -----

# 1) Dans chaque repo, configure SSH pour utiliser la clé deploy (id_deploy_nudger)
- name: Set core.sshCommand to use deploy key (local repo config)
  become: true
  become_user: "{{ item.0.name }}"
  ansible.builtin.git_config:
    name: core.sshCommand
    value: "ssh -i ~/.ssh/id_deploy_nudger -o IdentitiesOnly=yes"
    scope: local
    repo: "{{ item.1.dest | default('/home/' ~ item.0.name ~ '/' ~ (item.1.dest_rel | default('repo'))) }}"
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  when: git_auth_mode == 'ssh'
  loop_control:
    label: "{{ item.0.name }} -> {{ item.1.repo }}"

# 2) Fetch en tant que l'utilisateur (et pas root)
- name: Fetch all branches (prune) for each repo (git_repos)
  become: true
  become_user: "{{ item.0.name }}"
  ansible.builtin.command:
    argv:
      - git
      - -C
      - "{{ item.1.dest | default('/home/' ~ item.0.name ~ '/' ~ (item.1.dest_rel | default('repo'))) }}"
      - fetch
      - --all
      - --prune
  loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
  when: git_auth_mode == 'ssh'
  loop_control:
    label: "{{ item.0.name }} -> {{ item.1.repo }}"
