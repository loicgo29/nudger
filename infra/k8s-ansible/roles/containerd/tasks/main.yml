---

# --------------------
# Prérequis Kubernetes
# --------------------
- name: Create directory for APT keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags: prerequisites

- name: Add Kubernetes GPG key (modern method)
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    mode: '0644'
  tags: prerequisites

- name: Add Kubernetes repository
  apt_repository:
    repo: "{{ k8s_repo }}"
    state: present
    filename: kubernetes
    update_cache: yes
  tags: prerequisites

- name: Install prerequisites and Kubernetes packages
  apt:
    name: "{{ ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg', 'software-properties-common'] + k8s_packages }}"
    state: present
    update_cache: yes
  tags: kubernetes_packages

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop: "{{ k8s_packages }}"
  tags: kubernetes_packages

# --------------------
# Kernel et sysctl
# --------------------
- name: Load br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: yes
  tags: kernel_modules

- name: Ensure br_netfilter module loads on boot
  copy:
    dest: /etc/modules-load.d/br_netfilter.conf
    content: "br_netfilter\n"
    owner: root
    group: root
    mode: '0644'
  become: yes
  tags: kernel_modules

- name: Apply sysctl parameters
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop: "{{ sysctl_params | dict2items }}"
  tags: sysctl

# --------------------
# Containerd
# --------------------
- name: Supprimer ancienne config containerd si présente
  file:
    path: /etc/containerd/config.toml
    state: absent
  become: yes
  tags: containerd_install

- name: Télécharger containerd 1.7.27
  get_url:
    url: https://github.com/containerd/containerd/releases/download/v1.7.27/containerd-1.7.27-linux-amd64.tar.gz
    dest: /tmp/containerd-1.7.27-linux-amd64.tar.gz
    mode: '0644'
    timeout: 300
  retries: 3
  delay: 10
  tags: containerd_install

- name: Extraire containerd
  unarchive:
    src: /tmp/containerd-1.7.27-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: yes
    creates: /usr/local/bin/containerd
  tags: containerd_install

- name: Installer le service systemd containerd (forcer config.toml)
  copy:
    dest: /etc/systemd/system/containerd.service
    content: |
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target local-fs.target
      Wants=network.target

      [Service]
      ExecStart=
      ExecStart=/usr/local/bin/containerd --config /etc/containerd/config.toml
      Restart=always
      RestartSec=5
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-999
      LimitNOFILE=1048576
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  notify: Restart containerd
  tags: containerd_install

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes
  tags: containerd_install


- name: Générer config.toml avec CRI activé et SystemdCgroup
  shell: |
    containerd config default \
      | sed 's/disabled_plugins = .*/disabled_plugins = []/' \
      | sed 's/SystemdCgroup = false/SystemdCgroup = true/' \
      | sed 's@sandbox_image = .*@sandbox_image = "registry.k8s.io/pause:3.9"@' \
      > /etc/containerd/config.toml
  args:
    creates: /etc/containerd/config.toml
  become: yes
  tags: containerd_config

- name: Start and enable containerd
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: yes
  tags: containerd_install

- name: Attendre que le socket containerd soit prêt
  ansible.builtin.wait_for:
    path: /run/containerd/containerd.sock
    state: present
    timeout: 15
  become: yes
  tags: crictl

- name: Vérifier que le plugin CRI est bien chargé
  ansible.builtin.command: /usr/local/bin/ctr plugin ls
  register: ctr_plugins
  changed_when: false
  become: true
  tags: crictl

- name: Échouer si le plugin CRI n'est pas présent
  ansible.builtin.fail:
    msg: "Le plugin CRI n'est pas chargé dans containerd"
  when: "'cri' not in (ctr_plugins.stdout | regex_findall('io\\.containerd\\.grpc\\.v1\\s+cri') | join(' '))"

# --------------------
# crictl
# --------------------
- name: Télécharger crictl binaire
  get_url:
    url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.28.0/crictl-v1.28.0-linux-amd64.tar.gz
    dest: /tmp/crictl.tar.gz
    mode: '0644'
  tags: crictl

- name: Extraire crictl
  unarchive:
    src: /tmp/crictl.tar.gz
    dest: /usr/local/bin/
    remote_src: yes
    mode: '0755'
    creates: /usr/local/bin/crictl
  tags: crictl

- name: Configurer crictl pour containerd
  copy:
    dest: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
      debug: false
    owner: root
    group: root
    mode: '0644'
  tags: crictl

- name: Vérifier que CRI répond
  ansible.builtin.command: crictl info
  register: crictl_check
  changed_when: false
  failed_when: crictl_check.rc != 0
  tags: crictl

# --------------------
# Kubernetes init
# --------------------

- name: Vérifier si le cluster Kubernetes est déjà initialisé
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeadm_config
  become: yes
  tags: kubernetes_init

- name: Initialize Kubernetes cluster (master only)
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --control-plane-endpoint={{ hostvars[groups['k8s_masters'][0]].ansible_host }}
    --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  when:
    - inventory_hostname == groups['k8s_masters'][0]
    - not kubeadm_config.stat.exists
  register: kubeadm_init
  notify:
    - Save kubeconfig file
    - Configure kubectl
  tags: kubernetes_init

- name: Check if kube-proxy manifest is deployed
  ansible.builtin.command:
    cmd: kubectl get daemonset kube-proxy -n kube-system
  register: kube_proxy_daemonset
  failed_when: false
  changed_when: false
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Deploy kube-proxy if missing
  when: kube_proxy_daemonset.rc != 0
  ansible.builtin.command:
    cmd: kubeadm init phase addon kube-proxy
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: Wait for kube-proxy config to exist
  ansible.builtin.command: >
    kubectl get configmap kube-proxy -n kube-system
  register: kube_proxy_config
  retries: 10
  delay: 6
  until: kube_proxy_config.rc == 0
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubernetes_init

- name: Wait for kube-proxy pods to be running
  ansible.builtin.command: >
    kubectl get pods -n kube-system -l k8s-app=kube-proxy
    -o jsonpath='{.items[*].status.phase}'
  register: kube_proxy_pods
  retries: 15
  delay: 8
  until: kube_proxy_pods.stdout and
         kube_proxy_pods.stdout.split() | unique == ['Running']
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubernetes_init

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0600'
    remote_src: yes
  become: yes
  tags: kubernetes_init
