---
- name: Install prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - software-properties-common
    state: present
    update_cache: yes
  tags: prerequisites

- name: Create directory for APT keyrings
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags: prerequisites

- name: Add Kubernetes GPG key (modern method)
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
    dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    mode: '0644'
  tags: prerequisites

- name: Add Kubernetes repository
  apt_repository:
    repo: "{{ k8s_repo }}"
    state: present
    filename: kubernetes
    update_cache: yes
  tags: prerequisites

- name: Install Kubernetes packages
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
  loop: "{{ k8s_packages }}"
  tags: kubernetes_packages

- name: Hold Kubernetes packages
  command: apt-mark hold {{ item }}
  loop: "{{ k8s_packages }}"
  register: apt_mark_result
  changed_when: "'is already set on hold' not in apt_mark_result.stdout"
  tags: kubernetes_packages

- name: Load br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: yes
  tags: kernel_modules

- name: Ensure br_netfilter module loads on boot
  copy:
    dest: /etc/modules-load.d/br_netfilter.conf
    content: "br_netfilter\n"
    owner: root
    group: root
    mode: '0644'
  become: yes
  tags: kernel_modules

- name: Apply sysctl parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: yes
    state: present
    reload: yes
  loop: "{{ sysctl_params | dict2items }}"
  tags: sysctl

- name: Télécharger containerd 2.6.9
  get_url:
    url: https://github.com/containerd/containerd/releases/download/v1.7.27/containerd-1.7.27-linux-amd64.tar.gz
    dest: /tmp/containerd-1.7.27-linux-amd64.tar.gz
    mode: '0644'
    timeout: 300
  retries: 3
  delay: 10
  tags: containerd_install

- name: Extraire containerd
  unarchive:
    src: /tmp/containerd-1.7.27-linux-amd64.tar.gz
    dest: /usr/local
    remote_src: yes
    creates: /usr/local/bin/containerd
  tags: containerd_install

- name: Installer le service systemd containerd
  copy:
    dest: /etc/systemd/system/containerd.service
    content: |
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=network.target local-fs.target
      Wants=network.target

      [Service]
      ExecStart=/usr/local/bin/containerd
      Restart=always
      RestartSec=5
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-999
      LimitNOFILE=1048576
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity

      [Install]
      WantedBy=multi-user.target
    mode: '0644'
  notify: Restart containerd
  tags: containerd_install

- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
  tags: containerd_install

- name: Start and enable containerd
  systemd:
    name: containerd
    state: started
    enabled: yes
  tags: containerd_install

- name: Configurer containerd avec template
  template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
  notify: Restart containerd
  tags: containerd_config

- name: Télécharger crictl binaire
  get_url:
    url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.28.0/crictl-v1.28.0-linux-amd64.tar.gz
    dest: /tmp/crictl.tar.gz
    mode: '0644'
  tags: crictl

- name: Extraire crictl
  unarchive:
    src: /tmp/crictl.tar.gz
    dest: /usr/local/bin/
    remote_src: yes
    mode: '0755'
    creates: /usr/local/bin/crictl
  tags: crictl

- name: Vérifier que CRI répond
  ansible.builtin.command: crictl info
  register: crictl_check
  changed_when: false
  failed_when: crictl_check.rc != 0
  tags: crictl

- name: Initialize Kubernetes cluster (master only)
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --control-plane-endpoint={{ groups['k8s_masters'][0] }}
    --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == groups['k8s_masters'][0]
  register: kubeadm_init
  notify:
    - save kubeconfig
    - configure kubectl
  tags: kubernetes_init

- name: Deploy Flannel network (master only)
  ansible.builtin.command: kubectl apply -f {{ flannel_manifest }}
  when: inventory_hostname == groups['k8s_masters'][0]
  changed_when: false
  tags: kubernetes_init
