---
# Source: xwiki/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.4
      helm.sh/chart: mysql-12.3.2
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: xwiki/charts/mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
---
# Source: xwiki/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
automountServiceAccountToken: false
secrets:
  - name: xwiki-mysql
---
# Source: xwiki/templates/xwiki-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xwiki-sa
---
# Source: xwiki/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
type: Opaque
data:
  mysql-root-password: "eHdpa2k="
  mysql-password: "eHdpa2k="
---
# Source: xwiki/templates/initialization-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki-init-scripts
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
stringData:
  entrypoint: |
    #!/bin/bash
    ##
    # *Experimental* solution for custom properties.
    # With time we are looking other alternatives to setup this custom values.
    ##
    # Always execute "first_start" in order to get all new values keys from future versions.
    rm -f /usr/local/xwiki/data/xwiki.cfg
    rm -f /usr/local/xwiki/data/xwiki.properties
    rm -f /usr/local/xwiki/data/hibernate.cfg.xml

    # Reuse commands/resources from default entrypoint.
    source /usr/local/bin/docker-entrypoint.sh
    file_env 'CONTEXT_PATH' 'ROOT'
    if [ -d "/usr/local/tomcat" ]; then
      export AS_PATH=/usr/local/tomcat
    else
      export AS_PATH=/var/lib/jetty
    fi
    echo "Path: ${AS_PATH}"

    # Currently database preferences are replaced on hibernate (XML) file. 
    # To prevent errors with special XML chars, replace all for respective encoded alternative. 
    escapeXML() {
      echo "$1" | sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/"/\&quot;/g' -e "s/'/\&apos;/g"
    }
    if [[ -n "$DB_PASSWORD" ]]; then
      export DB_PASSWORD=$(escapeXML $DB_PASSWORD)
    fi
    if [[ -n "$JDBC_PARAMS" ]]; then
      export JDBC_PARAMS=$(escapeXML $JDBC_PARAMS)
    fi

    # Setup all default actions from first start
    first_start
    ## 
    # On future versions, when LTS start have this method we can remove this from this script. 
    # This method was requested on: https://github.com/xwiki/xwiki-docker/pull/36
    ## 
    function xwiki_replace_or_add() {
      local file_path="$1"
      local setting="$2"
      local new_value="$3"

      # Check if the setting exists in the file
      if grep -Eq "^ *#? *$setting=" "$file_path"; then
        # If the setting exists, replace the occurrence with the new value
        sed -i 's|^\( *#\? *\)'"$setting"'=.*$|'"$setting"'='"$new_value"'|g' "$file_path"
      else
        # If the setting doesn't exist, add it at the end of the file
        echo "$setting=$new_value" >> "$file_path"
      fi
    }

    # Add URL for Solr Remote instance
    # Backward compatibility for old image

    # Replace all values from keys defineded on customConfigs
    # If we detect extension, we loop over the array and add them

    # Replace all values from keys defined on customConfigsSecrets

    # Set secret Java options from javaOptsSecrets

    # Replace the platform provenance to keep track of the image
    sed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-war/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \
      $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed
    sed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-docker/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \
      $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed

    # Append properties prefixed with "-D" from a secret that provides properties in a file.
    # If no parameter is given append to the environment variable "JAVA_OPTS"
    # otherwise append to the file given as a parameter.
    publishProperties () {
      properties="${1}"
      outFile="${2}"

      for key in "${!properties[@]}"; do
        # skip element that either miss key OR value
        if [[ -z "${key}" || -z "${properties[${key}]}" ]]; then
          continue
        fi
        # If no output file is given we fill the environment variable
        if [[ -z ${outFile} ]]; then
          printf -v property -- '-D%s=%s' "${key}" "${properties[${key}]}"
          export JAVA_OPTS=${JAVA_OPTS:+${JAVA_OPTS} }${property}
        else
          # If the output file doesn't exist, create it
          if [[ ! -f ${outFile} ]]; then
            echo "" > "${outFile}"
          fi
          printf -- '-D%s=%s\n' "${key}" "${properties[${key}]}" >> "${outFile}"
        fi
      done
    }

    # Utilise an associative array to set properties.
    declare -A properties

    if [ -d "/var/lib/jetty" ]; then
      echo "" > start.d/xwiki.ini
      publishProperties properties start.d/xwiki.ini
      export JAVA_OPTIONS="${JAVA_OPTS}"
    else 
      if (/usr/local/tomcat/bin/version.sh | grep -q 'Tomcat/8'); then
        echo "Old Tomcat don't support java_opts file... Using normal props."
        publishProperties properties
      else 
        ## Clear contents of /tmp/java_opts.txt so that we don't add extra arguments at each pod restart.
        echo "" > /tmp/java_opts.txt
        publishProperties properties /tmp/java_opts.txt
        export JAVA_OPTS="${JAVA_OPTS} @/tmp/java_opts.txt"
      fi
    fi

    unset properties

    exec /usr/local/bin/docker-entrypoint.sh xwiki
---
# Source: xwiki/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
type: Opaque
data:
  mysql-root-password: ""
  mysql-user: ""
  mysql-password: ""
  mysql-database: ""
---
# Source: xwiki/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    bind-address=*
    max_allowed_packet=16M
    log-error=/opt/bitnami/mysql/logs/mysqld.log
---
# Source: xwiki/charts/mysql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-mysql-init-scripts
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  00-init.sql: |
    grant all privileges on *.* to xwiki@'%'
---
# Source: xwiki/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  # Base URL Solr désactivée (Solr non déployé)
  # SOLR_BASEURL: ""

  # Configuration base de données
  DB_USER: "xwiki"
  DB_HOST: "xwiki-mysql"
  DB_DATABASE: "xwiki"

  # Autres variables XWiki essentielles
  XWIKI_ADMIN_USER: "admin"
  XWIKI_ADMIN_PASSWORD: "admin"
  XWIKI_MAIL_FROM: "xwiki@example.com"
---
# Source: xwiki/templates/initialization-configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-init-scripts
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
data:

  glowroot.properties: |
---
# Source: xwiki/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: xwiki-mysql-headless
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: xwiki/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/name: mysql
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
---
# Source: xwiki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name:  xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: 
  sessionAffinity: ClientIP
  selector:
    app.kubernetes.io/name: xwiki
    app.kubernetes.io/instance: xwiki
---
# Source: xwiki/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
  serviceName: xwiki-mysql-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: e198c9f4d10a7f61748adad0a3360877c135802418b2be000ba95c73fd789a3c
      labels:
        app.kubernetes.io/instance: xwiki
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.4
        helm.sh/chart: mysql-12.3.2
        app.kubernetes.io/part-of: mysql
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: xwiki-mysql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: xwiki
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources: 
            limits:
              cpu: 400m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-root-password
            - name: MYSQL_ENABLE_SSL
              value: "no"
            - name: MYSQL_USER
              value: "xwiki"
            - name: MYSQL_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "xwiki"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin ping --protocol=tcp -h 127.0.0.1 -uroot -p"${password_aux}"
            failureThreshold: 3
            initialDelaySeconds: 80
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin ping --protocol=tcp -h 127.0.0.1 -uroot -p"${password_aux}"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            exec:
              command:
              - /bin/bash
              - -ec
              - |
                password_aux="${MYSQL_ROOT_PASSWORD:-}"
                if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                    password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                fi
                mysqladmin ping --protocol=tcp -h 127.0.0.1 -uroot -p"${password_aux}"
            failureThreshold: 10
            initialDelaySeconds: 150
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources: 
            limits:
              cpu: 400m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
            - name: mysql-credentials
              mountPath: /opt/bitnami/mysql/secrets/
      volumes:
        - name: config
          configMap:
            name: xwiki-mysql
        - name: custom-init-scripts
          configMap:
            name: xwiki-mysql-init-scripts
        - name: mysql-credentials
          secret:
            secretName: xwiki-mysql
            items:
              - key: mysql-root-password
                path: mysql-root-password
              - key: mysql-password
                path: mysql-password
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: xwiki
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
        
        selector:
          matchLabels:
            type: mysql
---
# Source: xwiki/templates/xwiki.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  serviceName: xwiki
  selector:
    matchLabels:
      app.kubernetes.io/name: xwiki
      app.kubernetes.io/instance: xwiki
  template:
    metadata:
      annotations:
        # Annotations to rollout changes on configs on workload
        checksum/configmap: 51e5f5e202d8bc43c5675bcf70da5b5b5a2ba9f693ec53466faa815af6c3c405
        checksum/initialization-configmaps: 779fb2a9731056f94c51eb81b132e0c950d10873edaee039e2df5a6a9c86460d
        checksum/initialization-secrets: 70367779dfae87485b30a4856d13561d88960b32bb4480a7740cd873b5556928
      labels:
        app.kubernetes.io/name: xwiki
        helm.sh/chart: xwiki-1.5.5
        app.kubernetes.io/instance: xwiki
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: xwiki-sa
      initContainers:
        - name: xwiki-secrets
          image: xwiki:lts-mysql-tomcat
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
                cp /secrets/entrypoint /entrypoint/start.sh
                chmod 0550 /entrypoint/start.sh
          securityContext:
            {}
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          env:
          volumeMounts:
            - name: secrets
              mountPath: /secrets
            - name: entrypoint
              mountPath: /entrypoint
      containers:
        - name: xwiki
          image: xwiki:lts-mysql-tomcat
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "/entrypoint/start.sh"]
          ports:
            - containerPort: 8080
          env:
            - name: JAVA_OPTS
              value: "-Xmx1024m -Xmx1g"
            - name: DB_HOST
              value: "nudger-xwiki-mysql"
                      
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "xwiki-mysql"
                  key: mysql-password
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_HOST
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_USER
            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_DATABASE
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          volumeMounts:
            - name: xwiki-data
              mountPath: /usr/local/xwiki/data
            - name: configmaps
              mountPath: /configmaps
            - name: entrypoint
              mountPath: /entrypoint
              readOnly: true
      volumes:
        - name: configmaps
          configMap:
            name: xwiki-init-scripts
        - name: secrets
          secret:
            secretName: xwiki-init-scripts
        - name: entrypoint
          emptyDir:
            sizeLimit: 1Mi
            medium: Memory
        - name: xwiki-data
  volumeClaimTemplates:
    - metadata:
        name: xwiki-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
