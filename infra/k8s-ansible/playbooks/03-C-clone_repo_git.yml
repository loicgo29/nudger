---
- name: Créer users + cloner leurs dépôts (clé SSH différente par user)
  hosts: k8s_masters
  become: true
  vars:
    shallow_clone: true
    enforce_known_hosts: true
    user_deploy_key_filename: "id_ed25519_deploy"
  vars_files:
    - ../group_vars/vault.yml    # <= ajoute ça

  tasks:
    - name: Créer les groupes manquants (si listés)
      ansible.builtin.group:
        name: "{{ item }}"
        state: present
      loop: "{{ users_k8s | map(attribute='groups') | flatten | select() | unique }}"
      when: users_k8s | length > 0

    - name: Créer les utilisateurs
      ansible.builtin.user:
        name: "{{ user.name }}"
        groups: "{{ (user.groups | default([])) | join(',') }}"
        password: "{{ user.password | default(omit) }}"
        shell: /bin/bash
        create_home: true
      loop: "{{ users_k8s }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }

    # --------- SSH par user ---------

    - name: Créer ~/.ssh
      ansible.builtin.file:
        path: "/home/{{ user.name }}/.ssh"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0700"
      loop: "{{ users_k8s }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }

    - name: Écrire authorized_keys si fourni
      ansible.builtin.copy:
        dest: "/home/{{ user.name }}/.ssh/authorized_keys"
        content: "{{ user.ssh_public_key | default('') }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0600"
      loop: "{{ users_k8s | selectattr('ssh_public_key','defined') | list }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }

    - name: Ajouter github.com au known_hosts (recommandé)
      ansible.builtin.known_hosts:
        path: "/home/{{ user.name }}/.ssh/known_hosts"
        name: "github.com"
        key: "github.com {{ lookup('ansible.builtin.pipe', 'ssh-keyscan -t rsa,ed25519 github.com 2>/dev/null') }}"
        state: present
      become_user: "{{ user.name }}"
      loop: "{{ users_k8s }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }
      when: enforce_known_hosts | bool

    - name: Vérifier qu’une deploy key est fournie pour chaque user ayant des repos
      ansible.builtin.assert:
        that:
          - deploy_keys[user.name] is defined
          - (deploy_keys[user.name] | length) > 0
        fail_msg: "Pas de deploy key pour l’utilisateur {{ user.name }} alors qu’il a des repos à cloner."
      loop: "{{ users_k8s | selectattr('git_repos','defined') | selectattr('git_repos','truthy') | list }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }

    - name: Installer la deploy key privée par user
      ansible.builtin.copy:
        dest: "/home/{{ user.name }}/.ssh/{{ user_deploy_key_filename }}"
        content: "{{ deploy_keys[user.name] }}"
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0600"
      loop: "{{ users_k8s | selectattr('git_repos','defined') | selectattr('git_repos','truthy') | list }}"
      loop_control: { loop_var: user, label: "{{ user.name }}" }
      no_log: true  # ne pas logguer la clé

    # --------- Repos ---------

    - name: Créer les dossiers des repos
      ansible.builtin.file:
        path: "{{ repo.dest }}"
        state: directory
        owner: "{{ user.name }}"
        group: "{{ user.name }}"
        mode: "0755"
      loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
      loop_control:
        label: "{{ item.0.name }}: {{ item.1.dest | default('NO_DEST') }}"
      vars:
        user: "{{ item.0 }}"
        repo: "{{ item.1 }}"

    - name: Git clone/pull (clé dédiée par user)
      ansible.builtin.git:
        repo: "{{ repo.repo }}"                  # ex: git@github.com:loicgo29/nudger.git
        dest: "{{ repo.dest }}"
        version: "{{ repo.version | default('main') }}"
        update: true
        force: false
        depth: "{{ 1 if shallow_clone else omit }}"
        recursive: true
        track_submodules: true
        accept_hostkey: true
        key_file: "/home/{{ user.name }}/.ssh/{{ user_deploy_key_filename }}"
      become_user: "{{ user.name }}"
      loop: "{{ users_k8s | subelements('git_repos', skip_missing=True) }}"
      loop_control:
        label: "{{ item.0.name }}: {{ item.1.repo }} -> {{ item.1.dest }}"
      vars:
        user: "{{ item.0 }}"
        repo: "{{ item.1 }}"
      when:
        - repo.repo is defined
        - repo.dest is defined
