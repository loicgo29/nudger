---
# This role installs containerd, Kubernetes (kubeadm/kubelet/kubectl),
# initializes a single master (first host in group k8s_masters),
# applies Flannel CNI, and configures kubeconfig for root + ansible user.

# PRE-FLIGHT: kernel modules and sysctl
# ----------------------------
# System prep for Kubernetes
# ----------------------------

- name: Ensure br_netfilter kernel module is loaded
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: true
  tags: preflight

- name: Ensure required sysctl params are set
  ansible.builtin.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    reload: true
  loop: "{{ sysctl_params | dict2items }}"
  become: true
  tags: preflight

- name: Disable swap immediately
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb | int > 0
  become: true
  changed_when: false
  tags: preflight

- name: Ensure swap is disabled on boot (comment fstab entries)
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^\s*([^#]\S+\s+\S+\s+swap\s+\S+.*)$'
    replace: '# \1'
  become: true
  tags: preflight

# ----------------------------
# Containerd
# ----------------------------

- name: Remove legacy containerd config if present
  ansible.builtin.file:
    path: /etc/containerd/config.toml
    state: absent
  become: true
  tags: containerd

- name: Install containerd
  ansible.builtin.apt:
    name: containerd
    state: present
    update_cache: true
  become: true
  tags: containerd

- name: Deploy containerd config
  ansible.builtin.template:
    src: config.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: '0644'
  notify: Restart containerd
  become: true
  tags: containerd

- name: Ensure containerd is running and enabled
  ansible.builtin.systemd:
    name: containerd
    state: started
    enabled: true
  become: true
  tags: containerd

# ----------------------------
# Kubernetes repo & packages
# ----------------------------

- name: Ensure apt keyrings directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true
  tags: k8s

- name: Download Kubernetes repo key
  ansible.builtin.get_url:
    url: "{{ k8s_gpg_key }}"
    dest: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    mode: '0644'
  become: true
  tags: k8s

- name: Configure Kubernetes APT repository
  ansible.builtin.apt_repository:
    repo: "{{ k8s_repo }}"
    filename: kubernetes
    state: present
  become: true
  tags: k8s

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name: "{{ k8s_packages }}"
    state: present
    update_cache: true
  become: true
  tags: k8s

# ----------------------------
# Init master
# ----------------------------

- name: Check if cluster already initialized
  ansible.builtin.stat:
    path: "{{ kubeconfig_path }}"
  register: kubeadm_config
  become: true
  tags: init

- name: Initialize Kubernetes control-plane (only first master)
  ansible.builtin.command: >
    kubeadm init
    --pod-network-cidr={{ pod_network_cidr }}
    --control-plane-endpoint={{ hostvars[groups['k8s_masters'][0]].ansible_host }}
    --upload-certs
  args:
    creates: "{{ kubeconfig_path }}"
  when:
    - inventory_hostname == groups['k8s_masters'][0]
    - not kubeadm_config.stat.exists
  register: kubeadm_init
  notify: Save kubeconfig file (root)
  become: true
  tags: init

# ----------------------------
# Kubeconfig for ansible user
# ----------------------------

- name: Ensure .kube directory exists for ansible user
  ansible.builtin.file:
    path: "/home/{{ ansible_user | default('ansible') }}/.kube"
    state: directory
    mode: '0700'
    owner: "{{ ansible_user | default('ansible') }}"
    group: "{{ ansible_user | default('ansible') }}"
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubeconfig

- name: Copy admin.conf to ansible user home
  ansible.builtin.copy:
    src: "{{ kubeconfig_path }}"
    dest: "/home/{{ ansible_user | default('ansible') }}/.kube/config"
    owner: "{{ ansible_user | default('ansible') }}"
    group: "{{ ansible_user | default('ansible') }}"
    mode: '0600'
    remote_src: true
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubeconfig

- name: Ensure KUBECONFIG line in ansible user's .bashrc
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_user | default('ansible') }}/.bashrc"
    line: 'export KUBECONFIG=$HOME/.kube/config'
    create: true
    state: present
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubeconfig

# ----------------------------
# Flannel CNI
# ----------------------------

- name: Apply Flannel CNI manifest
  ansible.builtin.command:
    cmd: "kubectl apply -f {{ flannel_manifest_url }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: flannel_apply
  changed_when: "'created' in flannel_apply.stdout or 'configured' in flannel_apply.stdout"
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: flannel

# Auto-detect the namespace created by Flannel (avoids hardcoding)
- name: Detect Flannel namespace by label
  ansible.builtin.command: >
    kubectl get ds -A -l app=flannel -o jsonpath='{.items[0].metadata.namespace}'
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: flannel_ns_detect
  changed_when: false
  failed_when: flannel_ns_detect.rc != 0 or flannel_ns_detect.stdout | length == 0
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: flannel

- name: Wait for Flannel DaemonSet rollout
  ansible.builtin.command: >
    kubectl -n {{ flannel_ns_detect.stdout }}
    rollout status ds/kube-flannel-ds --timeout={{ flannel_wait_timeout }}
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  register: flannel_rollout
  changed_when: false
  failed_when: flannel_rollout.rc != 0
  become: true
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: flannel

