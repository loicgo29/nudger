---
# Source: xwiki/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.4
      helm.sh/chart: mysql-12.3.2
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: xwiki/charts/mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
---
# Source: xwiki/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
automountServiceAccountToken: false
secrets:
  - name: xwiki-mysql
---
# Source: xwiki/templates/xwiki-sa.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: xwiki-sa
---
# Source: xwiki/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
type: Opaque
data:
  mysql-root-password: "eHdpa2k="
  mysql-password: "eHdpa2k="
---
# Source: xwiki/templates/initialization-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki-init-scripts
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
stringData:
  entrypoint: "#!/bin/bash\n##\n# *Experimental* solution for custom properties.\n# With time we are looking other alternatives to setup this custom values.\n##\n# Always execute \"first_start\" in order to get all new values keys from future versions.\nrm -f /usr/local/xwiki/data/xwiki.cfg\nrm -f /usr/local/xwiki/data/xwiki.properties\nrm -f /usr/local/xwiki/data/hibernate.cfg.xml\n\n# Reuse commands/resources from default entrypoint.\nsource /usr/local/bin/docker-entrypoint.sh\nfile_env 'CONTEXT_PATH' 'ROOT'\nif [ -d \"/usr/local/tomcat\" ]; then\n  export AS_PATH=/usr/local/tomcat\nelse\n  export AS_PATH=/var/lib/jetty\nfi\necho \"Path: ${AS_PATH}\"\n\n# Currently database preferences are replaced on hibernate (XML) file. \n# To prevent errors with special XML chars, replace all for respective encoded alternative. \nescapeXML() {\n  echo \"$1\" | sed -e 's/&/\\&amp;/g' -e 's/</\\&lt;/g' -e 's/>/\\&gt;/g' -e 's/\"/\\&quot;/g' -e \"s/'/\\&apos;/g\"\n}\nif [[ -n \"$DB_PASSWORD\" ]]; then\n  export DB_PASSWORD=$(escapeXML $DB_PASSWORD)\nfi\nif [[ -n \"$JDBC_PARAMS\" ]]; then\n  export JDBC_PARAMS=$(escapeXML $JDBC_PARAMS)\nfi\n\n# Setup all default actions from first start\nfirst_start\n## \n# On future versions, when LTS start have this method we can remove this from this script. \n# This method was requested on: https://github.com/xwiki/xwiki-docker/pull/36\n## \nfunction xwiki_replace_or_add() {\n  local file_path=\"$1\"\n  local setting=\"$2\"\n  local new_value=\"$3\"\n\n  # Check if the setting exists in the file\n  if grep -Eq \"^ *#? *$setting=\" \"$file_path\"; then\n    # If the setting exists, replace the occurrence with the new value\n    sed -i 's|^\\( *#\\? *\\)'\"$setting\"'=.*$|'\"$setting\"'='\"$new_value\"'|g' \"$file_path\"\n  else\n    # If the setting doesn't exist, add it at the end of the file\n    echo \"$setting=$new_value\" >> \"$file_path\"\n  fi\n}\n\n# Add URL for Solr Remote instance\n# Backward compatibility for old image\n\n# Replace all values from keys defineded on customConfigs\n# If we detect extension, we loop over the array and add them\n\n# Replace all values from keys defined on customConfigsSecrets\n\n# Set secret Java options from javaOptsSecrets\n\n# Replace the platform provenance to keep track of the image\nsed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-war/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \\\n  $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed\nsed -i 's/<id>org.xwiki.platform:xwiki-platform-distribution-docker/<id>org.xwiki.contrib:xwiki-platform-distribution-helm-docker/' \\\n  $AS_PATH/webapps/${CONTEXT_PATH}/META-INF/extension.xed\n\n# Append properties prefixed with \"-D\" from a secret that provides properties in a file.\n# If no parameter is given append to the environment variable \"JAVA_OPTS\"\n# otherwise append to the file given as a parameter.\npublishProperties () {\n  properties=\"${1}\"\n  outFile=\"${2}\"\n\n  for key in \"${!properties[@]}\"; do\n    # skip element that either miss key OR value\n    if [[ -z \"${key}\" || -z \"${properties[${key}]}\" ]]; then\n      continue\n    fi\n    # If no output file is given we fill the environment variable\n    if [[ -z ${outFile} ]]; then\n      printf -v property -- '-D%s=%s' \"${key}\" \"${properties[${key}]}\"\n      export JAVA_OPTS=${JAVA_OPTS:+${JAVA_OPTS} }${property}\n    else\n      # If the output file doesn't exist, create it\n      if [[ ! -f ${outFile} ]]; then\n        echo \"\" > \"${outFile}\"\n      fi\n      printf -- '-D%s=%s\\n' \"${key}\" \"${properties[${key}]}\" >> \"${outFile}\"\n    fi\n  done\n}\n\n# Utilise an associative array to set properties.\ndeclare -A properties\n\nif [ -d \"/var/lib/jetty\" ]; then\n  echo \"\" > start.d/xwiki.ini\n  publishProperties properties start.d/xwiki.ini\n  export JAVA_OPTIONS=\"${JAVA_OPTS}\"\nelse \n  if (/usr/local/tomcat/bin/version.sh | grep -q 'Tomcat/8'); then\n    echo \"Old Tomcat don't support java_opts file... Using normal props.\"\n    publishProperties properties\n  else \n    ## Clear contents of /tmp/java_opts.txt so that we don't add extra arguments at each pod restart.\n    echo \"\" > /tmp/java_opts.txt\n    publishProperties properties /tmp/java_opts.txt\n    export JAVA_OPTS=\"${JAVA_OPTS} @/tmp/java_opts.txt\"\n  fi\nfi\n\nunset properties\n\nexec /usr/local/bin/docker-entrypoint.sh xwiki\n"
---
# Source: xwiki/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
type: Opaque
data:
  mysql-root-password: ""
  mysql-user: ""
  mysql-password: ""
  mysql-database: ""
---
# Source: xwiki/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    skip-name-resolve
    explicit_defaults_for_timestamp
    character-set-server=utf8mb4
    collation-server=utf8mb4_bin
    bind-address=*
    max_allowed_packet=16M
    log-error=/opt/bitnami/mysql/logs/mysqld.log
---
# Source: xwiki/charts/mysql/templates/primary/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-mysql-init-scripts
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
data:
  00-init.sql: |
    grant all privileges on *.* to xwiki@'%'
---
# Source: xwiki/templates/configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  # Base URL Solr désactivée (Solr non déployé)
  # SOLR_BASEURL: ""

  # Configuration base de données
  DB_USER: "xwiki"
  DB_HOST: "xwiki-mysql"
  DB_DATABASE: "xwiki"
  # Autres variables XWiki essentielles
  XWIKI_ADMIN_USER: "admin"
  XWIKI_ADMIN_PASSWORD: "admin"
  XWIKI_MAIL_FROM: "xwiki@example.com"
---
# Source: xwiki/templates/initialization-configmaps.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: xwiki-init-scripts
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
data:
  glowroot.properties: ""
---
# Source: xwiki/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: xwiki-mysql-headless
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: xwiki/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/name: mysql
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
---
# Source: xwiki/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name:
  sessionAffinity: ClientIP
  selector:
    app.kubernetes.io/name: xwiki
    app.kubernetes.io/instance: xwiki
---
# Source: xwiki/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xwiki-mysql
  namespace: "open4goods"
  labels:
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.4
    helm.sh/chart: mysql-12.3.2
    app.kubernetes.io/part-of: mysql
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: xwiki
      app.kubernetes.io/name: mysql
      app.kubernetes.io/part-of: mysql
      app.kubernetes.io/component: primary
  serviceName: xwiki-mysql-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: e198c9f4d10a7f61748adad0a3360877c135802418b2be000ba95c73fd789a3c
      labels:
        app.kubernetes.io/instance: xwiki
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.4
        helm.sh/chart: mysql-12.3.2
        app.kubernetes.io/part-of: mysql
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: xwiki-mysql
      automountServiceAccountToken: false
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: xwiki
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 400m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.4-debian-12-r7
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-root-password
            - name: MYSQL_ENABLE_SSL
              value: "no"
            - name: MYSQL_USER
              value: "xwiki"
            - name: MYSQL_PASSWORD_FILE
              value: /opt/bitnami/mysql/secrets/mysql-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "xwiki"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 80
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 150
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              cpu: 400m
              memory: 2Gi
            requests:
              cpu: 400m
              memory: 1Gi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
            - name: mysql-credentials
              mountPath: /opt/bitnami/mysql/secrets/
      volumes:
        - name: config
          configMap:
            name: xwiki-mysql
        - name: custom-init-scripts
          configMap:
            name: xwiki-mysql-init-scripts
        - name: mysql-credentials
          secret:
            secretName: xwiki-mysql
            items:
              - key: mysql-root-password
                path: mysql-root-password
              - key: mysql-password
                path: mysql-password
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: xwiki
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "2Gi"
        selector:
          matchLabels:
            type: mysql
---
# Source: xwiki/templates/xwiki.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: xwiki
  labels:
    app.kubernetes.io/name: xwiki
    helm.sh/chart: xwiki-1.5.5
    app.kubernetes.io/instance: xwiki
    app.kubernetes.io/managed-by: Helm
  annotations:
spec:
  replicas: 1
  serviceName: xwiki
  selector:
    matchLabels:
      app.kubernetes.io/name: xwiki
      app.kubernetes.io/instance: xwiki
  template:
    metadata:
      annotations:
        # Annotations to rollout changes on configs on workload
        checksum/configmap: 51e5f5e202d8bc43c5675bcf70da5b5b5a2ba9f693ec53466faa815af6c3c405
        checksum/initialization-configmaps: 779fb2a9731056f94c51eb81b132e0c950d10873edaee039e2df5a6a9c86460d
        checksum/initialization-secrets: 70367779dfae87485b30a4856d13561d88960b32bb4480a7740cd873b5556928
      labels:
        app.kubernetes.io/name: xwiki
        helm.sh/chart: xwiki-1.5.5
        app.kubernetes.io/instance: xwiki
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: xwiki-sa
      initContainers:
        - name: xwiki-secrets
          image: xwiki:lts-mysql-tomcat
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              cp /secrets/entrypoint /entrypoint/start.sh
              chmod 0550 /entrypoint/start.sh
          securityContext: {}
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          env:
          volumeMounts:
            - name: secrets
              mountPath: /secrets
            - name: entrypoint
              mountPath: /entrypoint
      containers:
        - name: xwiki
          image: xwiki:lts-mysql-tomcat
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "/entrypoint/start.sh"]
          ports:
            - containerPort: 8080
          env:
            - name: JAVA_OPTS
              value: "-Xmx1024m -Xmx1g"
            - name: DB_HOST
              value: "nudger-xwiki-mysql"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "xwiki-mysql"
                  key: mysql-password
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_HOST
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_USER
            - name: DB_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: xwiki
                  key: DB_DATABASE
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 250m
              memory: 512Mi
          volumeMounts:
            - name: xwiki-data
              mountPath: /usr/local/xwiki/data
            - name: configmaps
              mountPath: /configmaps
            - name: entrypoint
              mountPath: /entrypoint
              readOnly: true
      volumes:
        - name: configmaps
          configMap:
            name: xwiki-init-scripts
        - name: secrets
          secret:
            secretName: xwiki-init-scripts
        - name: entrypoint
          emptyDir:
            sizeLimit: 1Mi
            medium: Memory
        - name: xwiki-data
  volumeClaimTemplates:
    - metadata:
        name: xwiki-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "5Gi"
        storageClassName: "longhorn"
